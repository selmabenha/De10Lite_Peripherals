<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.7.2" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.7.2(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Menu Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="TERASIC_DE10LITE"/>
    <a name="downloadFrequency" val="5000000.0"/>
    <a name="simulationFrequency" val="16.0"/>
    <boardmap boardname="TERASIC_DE10LITE">
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc key="/Input_bus_1" pmap="575_243_0,575_285_0"/>
      <mc key="/Output_bus_1" map="326,336"/>
    </boardmap>
    <comp lib="0" loc="(130,220)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_1"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(350,160)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_1"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(450,180)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_2"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(450,430)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_7"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="10"/>
    </comp>
    <comp lib="0" loc="(460,220)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_3"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(50,220)" name="Clock"/>
    <comp lib="0" loc="(530,250)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_4"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(540,290)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_5"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(550,360)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="Output_bus_6"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(60,190)" name="Clock"/>
    <comp lib="0" loc="(60,250)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="Input_bus_2"/>
      <a name="radix" val="16"/>
      <a name="width" val="10"/>
    </comp>
    <comp lib="0" loc="(70,150)" name="Clock"/>
    <wire from="(110,180)" to="(110,190)"/>
    <wire from="(110,180)" to="(130,180)"/>
    <wire from="(130,150)" to="(130,160)"/>
    <wire from="(130,240)" to="(130,250)"/>
    <wire from="(130,260)" to="(130,290)"/>
    <wire from="(350,180)" to="(450,180)"/>
    <wire from="(350,200)" to="(460,200)"/>
    <wire from="(350,220)" to="(440,220)"/>
    <wire from="(350,240)" to="(430,240)"/>
    <wire from="(350,260)" to="(420,260)"/>
    <wire from="(350,280)" to="(410,280)"/>
    <wire from="(40,290)" to="(130,290)"/>
    <wire from="(410,280)" to="(410,430)"/>
    <wire from="(410,430)" to="(450,430)"/>
    <wire from="(420,260)" to="(420,360)"/>
    <wire from="(420,360)" to="(550,360)"/>
    <wire from="(430,240)" to="(430,290)"/>
    <wire from="(430,290)" to="(540,290)"/>
    <wire from="(440,220)" to="(440,250)"/>
    <wire from="(440,250)" to="(530,250)"/>
    <wire from="(460,200)" to="(460,220)"/>
    <wire from="(50,220)" to="(70,220)"/>
    <wire from="(60,190)" to="(110,190)"/>
    <wire from="(60,250)" to="(130,250)"/>
    <wire from="(70,150)" to="(130,150)"/>
    <wire from="(70,200)" to="(130,200)"/>
    <wire from="(70,200)" to="(70,220)"/>
  </circuit>
  <vhdl name="accel">library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity accel is
	port (
		-- CLOCK
		ADC_CLK_10       : in std_logic;
		MAX10_CLK1_50    : in std_logic;
		MAX10_CLK2_50    : in std_logic;

		-- SEG7
		HEX0             : out std_logic_vector(7 downto 0);
		HEX1             : out std_logic_vector(7 downto 0);
		HEX2             : out std_logic_vector(7 downto 0);
		HEX3             : out std_logic_vector(7 downto 0);
		HEX4             : out std_logic_vector(7 downto 0);
		HEX5             : out std_logic_vector(7 downto 0);

		-- KEY
		KEY              : in std_logic_vector(1 downto 0);

		-- LED
		LEDR             : out std_logic_vector(9 downto 0);

		-- SW
		SW               : in std_logic_vector(9 downto 0);

		-- Accelerometer ports
		GSENSOR_CS_N     : out std_logic;
		GSENSOR_INT      : in std_logic_vector(2 downto 1);
		GSENSOR_SCLK     : out std_logic;
		GSENSOR_SDI      : inout std_logic;
		GSENSOR_SDO      : inout std_logic
		
);
end entity accel;

architecture rtl of accel is
	constant SPI_CLK_FREQ : natural := 200;  -- SPI Clock (Hz)
	constant UPDATE_FREQ  : natural := 1;    -- Sampling frequency (Hz)

	-- clks and reset
	signal reset_n        : std_logic;
	signal clk            : std_logic;
	signal spi_clk        : std_logic;
	signal spi_clk_out    : std_logic;

	-- output data
	signal data_update    : std_logic;
	signal data_x         : std_logic_vector(15 downto 0);
	signal data_y         : std_logic_vector(15 downto 0);
	
	signal zero 		 : std_logic := '0';

	COMPONENT seg7 is
		port(
			segs : in std_logic_vector(4 downto 0);
			display : out std_logic_vector(6 downto 0)
		);
	END COMPONENT seg7;
	
	COMPONENT ip is
		port(
			inclk0:  in std_logic;
			c0: out std_logic;
			c1: out std_logic;
			c2: out std_logic
		);
	END COMPONENT ip;
	
	COMPONENT spi_control is
		port(
		 reset_n       : in  std_logic;
       clk           : in  std_logic;
       spi_clk       : in  std_logic;
       spi_clk_out   : in  std_logic;
        
		  -- Output signals
		  data_update   : out std_logic;
		  data_x        : out std_logic_vector(15 downto 0);
		  data_y        : out std_logic_vector(15 downto 0);
		  
		  -- SPI signals
		  spi_sdi       : out std_logic;
		  spi_sdo       : in  std_logic;
		  spi_csn       : out std_logic;
		  spi_clk_1      : out std_logic;
		  
		  -- Interrupt signal
		  interrupt     : in  std_logic_vector(1 downto 0) 
		);
	END COMPONENT spi_control;
	
begin
 -- Phase-locked Loop (PLL) instantiation
 -- Code for PLL instantiation was not provided in the Verilog, hence it's not included here
ip_inst: ip
	port map(
		inclk0 =&gt; MAX10_CLK1_50, c0 =&gt; clk, c1=&gt;spi_clk, c2=&gt;spi_clk_out
	);
 -- Instantiation of the spi_control module
 -- The code for spi_control instantiation was not provided in the Verilog, hence it's not included here

 controller: spi_control
		port map(reset_n, clk, spi_clk, spi_clk_out, 
		data_update, data_x, data_y, 
		GSENSOR_SDI, GSENSOR_SDO, GSENSOR_CS_N, GSENSOR_SCLK, GSENSOR_INT
		);
 -- Main block
 -- To make the module do something visible, the 16-bit data_x is displayed on four of the HEX displays in hexadecimal format.

 -- Pressing KEY0 freezes the accelerometer's output
 reset_n &lt;= KEY(0);

 -- 7-segment displays HEX0-3 show data_x in hexadecimal
 
 seg_0: seg7
	port map(
		segs(4) =&gt; zero, segs(3) =&gt; data_x(11), segs(2) =&gt; data_x(10),
		segs(1) =&gt; data_x(9), segs(0) =&gt; data_x(8), display(6) =&gt; HEX0(6),
		display(5) =&gt; HEX0(5), display(4) =&gt; HEX0(4), display(3) =&gt; HEX0(3),
		display(2) =&gt; HEX0(2), display(1) =&gt; HEX0(1), display(0) =&gt; HEX0(0)
	);
 --HEX0 &lt;= std_logic_vector(to_unsigned(data_x(11 downto 8), HEX0'length));
 --HEX1 &lt;= std_logic_vector(to_unsigned(data_x(7 downto 4), HEX1'length));
 --HEX2 &lt;= std_logic_vector(to_unsigned(data_x(11 downto 8), HEX2'length));
 --HEX3 &lt;= std_logic_vector(to_unsigned(data_x(7 downto 4), HEX3'length));

 -- A few statements just to light some LEDs
 --HEX4 &lt;= std_logic_vector(to_unsigned(data_x(7 downto 4), HEX4'length));
 --HEX5 &lt;= std_logic_vector(to_unsigned(data_x(7 downto 4), HEX5'length));
 -- LEDR &lt;= SW(9 downto 8) &amp; data_x(7 downto 0); -- commented out because LEDR is defined as output, not inout
end architecture rtl;
</vhdl>
</project>
