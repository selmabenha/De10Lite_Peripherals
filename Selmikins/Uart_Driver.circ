<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.7.2" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.7.2(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Splitter">
      <a name="bit1" val="0"/>
      <a name="bit10" val="1"/>
      <a name="bit11" val="1"/>
      <a name="bit12" val="1"/>
      <a name="bit13" val="1"/>
      <a name="bit14" val="1"/>
      <a name="bit15" val="1"/>
      <a name="bit16" val="2"/>
      <a name="bit17" val="2"/>
      <a name="bit18" val="2"/>
      <a name="bit19" val="2"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="2"/>
      <a name="bit21" val="2"/>
      <a name="bit22" val="2"/>
      <a name="bit23" val="2"/>
      <a name="bit24" val="3"/>
      <a name="bit25" val="3"/>
      <a name="bit26" val="3"/>
      <a name="bit27" val="3"/>
      <a name="bit28" val="3"/>
      <a name="bit29" val="3"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="3"/>
      <a name="bit31" val="3"/>
      <a name="bit32" val="4"/>
      <a name="bit33" val="4"/>
      <a name="bit34" val="4"/>
      <a name="bit35" val="4"/>
      <a name="bit36" val="4"/>
      <a name="bit37" val="4"/>
      <a name="bit38" val="4"/>
      <a name="bit39" val="4"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="5"/>
      <a name="bit41" val="5"/>
      <a name="bit42" val="5"/>
      <a name="bit43" val="5"/>
      <a name="bit44" val="5"/>
      <a name="bit45" val="5"/>
      <a name="bit46" val="5"/>
      <a name="bit47" val="5"/>
      <a name="bit48" val="6"/>
      <a name="bit49" val="6"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="6"/>
      <a name="bit51" val="6"/>
      <a name="bit52" val="6"/>
      <a name="bit53" val="6"/>
      <a name="bit54" val="6"/>
      <a name="bit55" val="6"/>
      <a name="bit56" val="7"/>
      <a name="bit57" val="7"/>
      <a name="bit58" val="7"/>
      <a name="bit59" val="7"/>
      <a name="bit6" val="0"/>
      <a name="bit60" val="7"/>
      <a name="bit61" val="7"/>
      <a name="bit62" val="7"/>
      <a name="bit63" val="7"/>
      <a name="bit7" val="0"/>
      <a name="bit8" val="1"/>
      <a name="bit9" val="1"/>
      <a name="fanout" val="8"/>
      <a name="incoming" val="64"/>
    </tool>
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
    <tool name="Tunnel">
      <a name="width" val="4"/>
    </tool>
    <tool name="Constant">
      <a name="value" val="0xffffffffffffffff"/>
      <a name="width" val="64"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="driver"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Menu Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate">
      <a name="size" val="20"/>
    </tool>
    <tool lib="1" name="AND Gate">
      <a name="size" val="30"/>
    </tool>
    <tool lib="1" name="OR Gate">
      <a name="size" val="30"/>
    </tool>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="driver">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="driver"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadBoard" val="TERASIC_DE10LITE"/>
    <a name="downloadFrequency" val="5000000.0"/>
    <a name="simulationFrequency" val="2048000.0"/>
    <boardmap boardname="TERASIC_DE10LITE">
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
      <mc/>
    </boardmap>
    <boardmap boardname="TERASIC_DE10LITE_100">
      <mc key="/input_rx" map="485,21"/>
      <mc key="/j_first" map="561,330"/>
      <mc key="/lf_first" map="587,330"/>
      <mc key="/reset" pmap="371_355_0"/>
      <mc key="/run_tx" pmap="371_355_9"/>
      <mc key="/rx_done" map="370,330"/>
      <mc key="/seg0" map="326,336"/>
      <mc key="/seg1" map="286,336"/>
      <mc key="/seg2" map="245,336"/>
      <mc key="/seg3" map="204,336"/>
      <mc key="/seg4" map="163,336"/>
      <mc key="/seg5" map="122,336"/>
      <mc key="/tx_out" map="485,8"/>
    </boardmap>
    <comp lib="0" loc="(240,870)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="clk"/>
    </comp>
    <comp lib="0" loc="(250,630)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="run_tx"/>
    </comp>
    <comp lib="0" loc="(250,900)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="reset"/>
    </comp>
    <comp lib="0" loc="(260,830)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="input_rx"/>
    </comp>
    <comp lib="0" loc="(300,670)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="message_tx"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(870,810)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="stored_message"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(880,840)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="message_stored"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(920,610)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="tx_out"/>
      <a name="output" val="true"/>
    </comp>
    <comp loc="(560,610)" name="uart_tx_tester">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="uart_tx_tester_1"/>
    </comp>
    <comp loc="(570,810)" name="uart_rx">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="uart_rx_1"/>
    </comp>
    <comp loc="(820,590)" name="uart_tx">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="uart_tx_1"/>
    </comp>
    <comp loc="(840,810)" name="letter8_writer1">
      <a name="label" val="letter8_writer_1"/>
    </comp>
    <wire from="(240,870)" to="(310,870)"/>
    <wire from="(250,630)" to="(340,630)"/>
    <wire from="(250,900)" to="(610,900)"/>
    <wire from="(260,830)" to="(350,830)"/>
    <wire from="(270,550)" to="(270,650)"/>
    <wire from="(270,550)" to="(830,550)"/>
    <wire from="(270,650)" to="(340,650)"/>
    <wire from="(300,670)" to="(340,670)"/>
    <wire from="(310,590)" to="(310,610)"/>
    <wire from="(310,590)" to="(600,590)"/>
    <wire from="(310,610)" to="(310,810)"/>
    <wire from="(310,610)" to="(340,610)"/>
    <wire from="(310,810)" to="(310,870)"/>
    <wire from="(310,810)" to="(350,810)"/>
    <wire from="(310,870)" to="(590,870)"/>
    <wire from="(560,610)" to="(600,610)"/>
    <wire from="(560,630)" to="(600,630)"/>
    <wire from="(570,810)" to="(620,810)"/>
    <wire from="(570,830)" to="(620,830)"/>
    <wire from="(590,850)" to="(590,870)"/>
    <wire from="(590,850)" to="(620,850)"/>
    <wire from="(610,870)" to="(610,900)"/>
    <wire from="(610,870)" to="(620,870)"/>
    <wire from="(820,590)" to="(830,590)"/>
    <wire from="(820,610)" to="(920,610)"/>
    <wire from="(830,550)" to="(830,590)"/>
    <wire from="(840,810)" to="(870,810)"/>
    <wire from="(840,830)" to="(850,830)"/>
    <wire from="(850,830)" to="(850,840)"/>
    <wire from="(850,840)" to="(880,840)"/>
  </circuit>
  <circuit name="demux8">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="demux8"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadFrequency" val="2500000.0"/>
    <a name="simulationFrequency" val="2048000.0"/>
    <comp lib="0" loc="(200,120)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="decision"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(200,90)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="in_bit"/>
    </comp>
    <comp lib="0" loc="(240,40)" name="Splitter">
      <a name="facing" val="south"/>
      <a name="fanout" val="4"/>
      <a name="incoming" val="4"/>
    </comp>
    <comp lib="0" loc="(600,120)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="choice1"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(600,150)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="choice2"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(600,180)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="choice3"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(600,210)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="choice4"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(600,240)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="choice5"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(600,270)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="choice6"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(600,300)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="choice7"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(600,90)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="choice0"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="1" loc="(350,130)" name="NOT Gate"/>
    <comp lib="1" loc="(350,170)" name="NOT Gate"/>
    <comp lib="1" loc="(350,210)" name="NOT Gate"/>
    <comp lib="1" loc="(350,90)" name="NOT Gate"/>
    <comp lib="1" loc="(490,300)" name="AND Gate">
      <a name="inputs" val="5"/>
      <a name="size" val="30"/>
    </comp>
    <comp lib="1" loc="(490,370)" name="AND Gate">
      <a name="inputs" val="5"/>
      <a name="size" val="30"/>
    </comp>
    <comp lib="1" loc="(490,440)" name="AND Gate">
      <a name="inputs" val="5"/>
      <a name="size" val="30"/>
    </comp>
    <comp lib="1" loc="(490,510)" name="AND Gate">
      <a name="inputs" val="5"/>
      <a name="size" val="30"/>
    </comp>
    <comp lib="1" loc="(490,580)" name="AND Gate">
      <a name="inputs" val="5"/>
      <a name="size" val="30"/>
    </comp>
    <comp lib="1" loc="(490,650)" name="AND Gate">
      <a name="inputs" val="5"/>
      <a name="size" val="30"/>
    </comp>
    <comp lib="1" loc="(490,720)" name="AND Gate">
      <a name="inputs" val="5"/>
      <a name="size" val="30"/>
    </comp>
    <comp lib="1" loc="(490,790)" name="AND Gate">
      <a name="inputs" val="5"/>
      <a name="size" val="30"/>
    </comp>
    <wire from="(200,120)" to="(210,120)"/>
    <wire from="(200,90)" to="(240,90)"/>
    <wire from="(210,40)" to="(210,120)"/>
    <wire from="(210,40)" to="(240,40)"/>
    <wire from="(240,280)" to="(240,350)"/>
    <wire from="(240,280)" to="(460,280)"/>
    <wire from="(240,350)" to="(240,420)"/>
    <wire from="(240,350)" to="(460,350)"/>
    <wire from="(240,420)" to="(240,490)"/>
    <wire from="(240,420)" to="(460,420)"/>
    <wire from="(240,490)" to="(240,560)"/>
    <wire from="(240,490)" to="(460,490)"/>
    <wire from="(240,560)" to="(240,630)"/>
    <wire from="(240,560)" to="(460,560)"/>
    <wire from="(240,630)" to="(240,700)"/>
    <wire from="(240,630)" to="(460,630)"/>
    <wire from="(240,700)" to="(240,770)"/>
    <wire from="(240,700)" to="(460,700)"/>
    <wire from="(240,770)" to="(460,770)"/>
    <wire from="(240,90)" to="(240,280)"/>
    <wire from="(250,60)" to="(250,90)"/>
    <wire from="(250,90)" to="(320,90)"/>
    <wire from="(260,130)" to="(260,580)"/>
    <wire from="(260,130)" to="(320,130)"/>
    <wire from="(260,580)" to="(260,650)"/>
    <wire from="(260,580)" to="(460,580)"/>
    <wire from="(260,60)" to="(260,130)"/>
    <wire from="(260,650)" to="(260,720)"/>
    <wire from="(260,650)" to="(460,650)"/>
    <wire from="(260,720)" to="(260,790)"/>
    <wire from="(260,720)" to="(460,720)"/>
    <wire from="(260,790)" to="(460,790)"/>
    <wire from="(270,170)" to="(270,450)"/>
    <wire from="(270,170)" to="(320,170)"/>
    <wire from="(270,450)" to="(270,520)"/>
    <wire from="(270,450)" to="(460,450)"/>
    <wire from="(270,520)" to="(270,730)"/>
    <wire from="(270,520)" to="(460,520)"/>
    <wire from="(270,60)" to="(270,170)"/>
    <wire from="(270,730)" to="(270,800)"/>
    <wire from="(270,730)" to="(460,730)"/>
    <wire from="(270,800)" to="(460,800)"/>
    <wire from="(280,210)" to="(280,390)"/>
    <wire from="(280,210)" to="(320,210)"/>
    <wire from="(280,390)" to="(280,530)"/>
    <wire from="(280,390)" to="(460,390)"/>
    <wire from="(280,530)" to="(280,670)"/>
    <wire from="(280,530)" to="(460,530)"/>
    <wire from="(280,60)" to="(280,210)"/>
    <wire from="(280,670)" to="(280,810)"/>
    <wire from="(280,670)" to="(460,670)"/>
    <wire from="(280,810)" to="(460,810)"/>
    <wire from="(350,130)" to="(400,130)"/>
    <wire from="(350,170)" to="(410,170)"/>
    <wire from="(350,210)" to="(420,210)"/>
    <wire from="(350,90)" to="(390,90)"/>
    <wire from="(390,290)" to="(390,360)"/>
    <wire from="(390,290)" to="(460,290)"/>
    <wire from="(390,360)" to="(390,430)"/>
    <wire from="(390,360)" to="(460,360)"/>
    <wire from="(390,430)" to="(390,500)"/>
    <wire from="(390,430)" to="(460,430)"/>
    <wire from="(390,500)" to="(390,570)"/>
    <wire from="(390,500)" to="(460,500)"/>
    <wire from="(390,570)" to="(390,640)"/>
    <wire from="(390,570)" to="(460,570)"/>
    <wire from="(390,640)" to="(390,710)"/>
    <wire from="(390,640)" to="(460,640)"/>
    <wire from="(390,710)" to="(390,780)"/>
    <wire from="(390,710)" to="(460,710)"/>
    <wire from="(390,780)" to="(460,780)"/>
    <wire from="(390,90)" to="(390,290)"/>
    <wire from="(400,130)" to="(400,300)"/>
    <wire from="(400,300)" to="(400,370)"/>
    <wire from="(400,300)" to="(460,300)"/>
    <wire from="(400,370)" to="(400,440)"/>
    <wire from="(400,370)" to="(460,370)"/>
    <wire from="(400,440)" to="(400,510)"/>
    <wire from="(400,440)" to="(460,440)"/>
    <wire from="(400,510)" to="(460,510)"/>
    <wire from="(410,170)" to="(410,310)"/>
    <wire from="(410,310)" to="(410,380)"/>
    <wire from="(410,310)" to="(460,310)"/>
    <wire from="(410,380)" to="(410,590)"/>
    <wire from="(410,380)" to="(460,380)"/>
    <wire from="(410,590)" to="(410,660)"/>
    <wire from="(410,590)" to="(460,590)"/>
    <wire from="(410,660)" to="(460,660)"/>
    <wire from="(420,210)" to="(420,320)"/>
    <wire from="(420,320)" to="(420,460)"/>
    <wire from="(420,320)" to="(460,320)"/>
    <wire from="(420,460)" to="(420,600)"/>
    <wire from="(420,460)" to="(460,460)"/>
    <wire from="(420,600)" to="(420,740)"/>
    <wire from="(420,600)" to="(460,600)"/>
    <wire from="(420,740)" to="(460,740)"/>
    <wire from="(490,300)" to="(510,300)"/>
    <wire from="(490,370)" to="(520,370)"/>
    <wire from="(490,440)" to="(530,440)"/>
    <wire from="(490,510)" to="(540,510)"/>
    <wire from="(490,580)" to="(550,580)"/>
    <wire from="(490,650)" to="(560,650)"/>
    <wire from="(490,720)" to="(570,720)"/>
    <wire from="(490,790)" to="(580,790)"/>
    <wire from="(510,90)" to="(510,300)"/>
    <wire from="(510,90)" to="(600,90)"/>
    <wire from="(520,120)" to="(520,370)"/>
    <wire from="(520,120)" to="(600,120)"/>
    <wire from="(530,150)" to="(530,440)"/>
    <wire from="(530,150)" to="(600,150)"/>
    <wire from="(540,180)" to="(540,510)"/>
    <wire from="(540,180)" to="(600,180)"/>
    <wire from="(550,210)" to="(550,580)"/>
    <wire from="(550,210)" to="(600,210)"/>
    <wire from="(560,240)" to="(560,650)"/>
    <wire from="(560,240)" to="(600,240)"/>
    <wire from="(570,270)" to="(570,720)"/>
    <wire from="(570,270)" to="(600,270)"/>
    <wire from="(580,300)" to="(580,790)"/>
    <wire from="(580,300)" to="(600,300)"/>
  </circuit>
  <circuit name="letter8_writer1">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="letter8_writer1"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="downloadFrequency" val="1666666.6666666667"/>
    <a name="simulationFrequency" val="4.0"/>
    <comp lib="0" loc="(1430,560)" name="Constant">
      <a name="value" val="0x0"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(1460,680)" name="Constant">
      <a name="value" val="0x0"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(1490,800)" name="Constant">
      <a name="value" val="0x0"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(150,500)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="update"/>
    </comp>
    <comp lib="0" loc="(150,540)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="clk"/>
    </comp>
    <comp lib="0" loc="(150,700)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="reset"/>
    </comp>
    <comp lib="0" loc="(1520,920)" name="Constant">
      <a name="value" val="0x0"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(1550,1040)" name="Constant">
      <a name="value" val="0x0"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(1580,1160)" name="Constant">
      <a name="value" val="0x0"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(1590,370)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="stored_message"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="64"/>
    </comp>
    <comp lib="0" loc="(1590,420)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="write_done"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1610,1280)" name="Constant">
      <a name="value" val="0x0"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(1640,1400)" name="Constant">
      <a name="value" val="0x0"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(2050,540)" name="Splitter">
      <a name="bit1" val="0"/>
      <a name="bit10" val="1"/>
      <a name="bit11" val="1"/>
      <a name="bit12" val="1"/>
      <a name="bit13" val="1"/>
      <a name="bit14" val="1"/>
      <a name="bit15" val="1"/>
      <a name="bit16" val="2"/>
      <a name="bit17" val="2"/>
      <a name="bit18" val="2"/>
      <a name="bit19" val="2"/>
      <a name="bit2" val="0"/>
      <a name="bit20" val="2"/>
      <a name="bit21" val="2"/>
      <a name="bit22" val="2"/>
      <a name="bit23" val="2"/>
      <a name="bit24" val="3"/>
      <a name="bit25" val="3"/>
      <a name="bit26" val="3"/>
      <a name="bit27" val="3"/>
      <a name="bit28" val="3"/>
      <a name="bit29" val="3"/>
      <a name="bit3" val="0"/>
      <a name="bit30" val="3"/>
      <a name="bit31" val="3"/>
      <a name="bit32" val="4"/>
      <a name="bit33" val="4"/>
      <a name="bit34" val="4"/>
      <a name="bit35" val="4"/>
      <a name="bit36" val="4"/>
      <a name="bit37" val="4"/>
      <a name="bit38" val="4"/>
      <a name="bit39" val="4"/>
      <a name="bit4" val="0"/>
      <a name="bit40" val="5"/>
      <a name="bit41" val="5"/>
      <a name="bit42" val="5"/>
      <a name="bit43" val="5"/>
      <a name="bit44" val="5"/>
      <a name="bit45" val="5"/>
      <a name="bit46" val="5"/>
      <a name="bit47" val="5"/>
      <a name="bit48" val="6"/>
      <a name="bit49" val="6"/>
      <a name="bit5" val="0"/>
      <a name="bit50" val="6"/>
      <a name="bit51" val="6"/>
      <a name="bit52" val="6"/>
      <a name="bit53" val="6"/>
      <a name="bit54" val="6"/>
      <a name="bit55" val="6"/>
      <a name="bit56" val="7"/>
      <a name="bit57" val="7"/>
      <a name="bit58" val="7"/>
      <a name="bit59" val="7"/>
      <a name="bit6" val="0"/>
      <a name="bit60" val="7"/>
      <a name="bit61" val="7"/>
      <a name="bit62" val="7"/>
      <a name="bit63" val="7"/>
      <a name="bit7" val="0"/>
      <a name="bit8" val="1"/>
      <a name="bit9" val="1"/>
      <a name="facing" val="west"/>
      <a name="fanout" val="8"/>
      <a name="incoming" val="64"/>
    </comp>
    <comp lib="0" loc="(350,430)" name="Constant">
      <a name="value" val="0x8"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(450,700)" name="Ground">
      <a name="facing" val="west"/>
    </comp>
    <comp lib="0" loc="(450,720)" name="Constant"/>
    <comp lib="0" loc="(450,780)" name="Constant">
      <a name="value" val="0x8"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="0" loc="(520,310)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="new_letter"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(550,410)" name="Constant">
      <a name="value" val="0xa"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(660,330)" name="Constant">
      <a name="value" val="0x0"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="1" loc="(1230,1440)" name="NOT Gate">
      <a name="size" val="20"/>
    </comp>
    <comp lib="1" loc="(350,680)" name="NOT Gate">
      <a name="size" val="20"/>
    </comp>
    <comp lib="1" loc="(420,690)" name="OR Gate">
      <a name="size" val="30"/>
    </comp>
    <comp lib="1" loc="(420,750)" name="AND Gate">
      <a name="size" val="30"/>
    </comp>
    <comp lib="1" loc="(690,420)" name="OR Gate"/>
    <comp lib="1" loc="(830,440)" name="AND Gate">
      <a name="size" val="30"/>
    </comp>
    <comp lib="1" loc="(930,500)" name="NOT Gate">
      <a name="facing" val="south"/>
      <a name="size" val="20"/>
    </comp>
    <comp lib="2" loc="(1120,1020)" name="Multiplexer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="2" loc="(1120,1140)" name="Multiplexer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="2" loc="(1120,1260)" name="Multiplexer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="2" loc="(1120,1380)" name="Multiplexer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="2" loc="(1120,540)" name="Multiplexer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="2" loc="(1120,660)" name="Multiplexer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="2" loc="(1120,780)" name="Multiplexer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="2" loc="(1120,900)" name="Multiplexer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="2" loc="(1460,550)" name="Multiplexer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="2" loc="(1490,670)" name="Multiplexer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="2" loc="(1520,790)" name="Multiplexer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="2" loc="(1550,910)" name="Multiplexer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="2" loc="(1580,1030)" name="Multiplexer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="2" loc="(1610,1150)" name="Multiplexer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="2" loc="(1640,1270)" name="Multiplexer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="2" loc="(1670,1390)" name="Multiplexer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="2" loc="(700,320)" name="Multiplexer">
      <a name="width" val="8"/>
    </comp>
    <comp lib="3" loc="(390,440)" name="Comparator">
      <a name="mode" val="unsigned"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="3" loc="(590,400)" name="Comparator">
      <a name="mode" val="unsigned"/>
    </comp>
    <comp lib="4" loc="(1320,1110)" name="Register">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp lib="4" loc="(1320,1230)" name="Register">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp lib="4" loc="(1320,1350)" name="Register">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp lib="4" loc="(1320,510)" name="Register">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp lib="4" loc="(1320,630)" name="Register">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp lib="4" loc="(1320,750)" name="Register">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp lib="4" loc="(1320,870)" name="Register">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp lib="4" loc="(1320,990)" name="Register">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp lib="4" loc="(450,670)" name="Counter">
      <a name="appearance" val="logisim_evolution"/>
      <a name="max" val="0x8"/>
      <a name="width" val="4"/>
    </comp>
    <comp lib="4" loc="(860,390)" name="Register">
      <a name="appearance" val="logisim_evolution"/>
      <a name="width" val="1"/>
    </comp>
    <comp lib="8" loc="(1378,472)" name="Text">
      <a name="text" val="8 bytes, saved or passed on"/>
    </comp>
    <comp lib="8" loc="(368,404)" name="Text">
      <a name="text" val="if count =7 wait one more and stop"/>
    </comp>
    <comp lib="8" loc="(546,657)" name="Text">
      <a name="text" val="count to 7 for 8 bytes"/>
    </comp>
    <comp lib="8" loc="(585,367)" name="Text">
      <a name="text" val="if lstop"/>
    </comp>
    <comp lib="8" loc="(928,347)" name="Text">
      <a name="text" val="asynchronously"/>
    </comp>
    <comp loc="(990,610)" name="demux8">
      <a name="label" val="demux_1"/>
    </comp>
    <wire from="(1000,1410)" to="(1100,1410)"/>
    <wire from="(1000,750)" to="(1000,1410)"/>
    <wire from="(1010,1290)" to="(1100,1290)"/>
    <wire from="(1010,730)" to="(1010,1290)"/>
    <wire from="(1020,1170)" to="(1100,1170)"/>
    <wire from="(1020,710)" to="(1020,1170)"/>
    <wire from="(1030,1050)" to="(1100,1050)"/>
    <wire from="(1030,570)" to="(1030,610)"/>
    <wire from="(1030,570)" to="(1100,570)"/>
    <wire from="(1030,690)" to="(1030,1050)"/>
    <wire from="(1040,670)" to="(1040,930)"/>
    <wire from="(1040,930)" to="(1100,930)"/>
    <wire from="(1050,650)" to="(1050,810)"/>
    <wire from="(1050,810)" to="(1100,810)"/>
    <wire from="(1060,630)" to="(1060,700)"/>
    <wire from="(1060,700)" to="(1100,700)"/>
    <wire from="(1070,1030)" to="(1070,1150)"/>
    <wire from="(1070,1030)" to="(1090,1030)"/>
    <wire from="(1070,1150)" to="(1070,1270)"/>
    <wire from="(1070,1150)" to="(1090,1150)"/>
    <wire from="(1070,1270)" to="(1070,1390)"/>
    <wire from="(1070,1270)" to="(1090,1270)"/>
    <wire from="(1070,1390)" to="(1090,1390)"/>
    <wire from="(1070,320)" to="(1070,550)"/>
    <wire from="(1070,550)" to="(1070,670)"/>
    <wire from="(1070,550)" to="(1090,550)"/>
    <wire from="(1070,670)" to="(1070,790)"/>
    <wire from="(1070,670)" to="(1090,670)"/>
    <wire from="(1070,790)" to="(1070,910)"/>
    <wire from="(1070,790)" to="(1090,790)"/>
    <wire from="(1070,910)" to="(1070,1030)"/>
    <wire from="(1070,910)" to="(1090,910)"/>
    <wire from="(1080,1010)" to="(1090,1010)"/>
    <wire from="(1080,1100)" to="(1080,1130)"/>
    <wire from="(1080,1100)" to="(1390,1100)"/>
    <wire from="(1080,1130)" to="(1090,1130)"/>
    <wire from="(1080,1220)" to="(1080,1250)"/>
    <wire from="(1080,1220)" to="(1390,1220)"/>
    <wire from="(1080,1250)" to="(1090,1250)"/>
    <wire from="(1080,1340)" to="(1080,1370)"/>
    <wire from="(1080,1340)" to="(1390,1340)"/>
    <wire from="(1080,1370)" to="(1090,1370)"/>
    <wire from="(1080,500)" to="(1080,530)"/>
    <wire from="(1080,500)" to="(1390,500)"/>
    <wire from="(1080,530)" to="(1090,530)"/>
    <wire from="(1080,620)" to="(1080,650)"/>
    <wire from="(1080,620)" to="(1390,620)"/>
    <wire from="(1080,650)" to="(1090,650)"/>
    <wire from="(1080,740)" to="(1080,770)"/>
    <wire from="(1080,740)" to="(1390,740)"/>
    <wire from="(1080,770)" to="(1090,770)"/>
    <wire from="(1080,860)" to="(1080,890)"/>
    <wire from="(1080,860)" to="(1390,860)"/>
    <wire from="(1080,890)" to="(1090,890)"/>
    <wire from="(1080,980)" to="(1080,1010)"/>
    <wire from="(1080,980)" to="(1390,980)"/>
    <wire from="(1100,1040)" to="(1100,1050)"/>
    <wire from="(1100,1160)" to="(1100,1170)"/>
    <wire from="(1100,1280)" to="(1100,1290)"/>
    <wire from="(1100,1400)" to="(1100,1410)"/>
    <wire from="(1100,560)" to="(1100,570)"/>
    <wire from="(1100,680)" to="(1100,700)"/>
    <wire from="(1100,800)" to="(1100,810)"/>
    <wire from="(1100,920)" to="(1100,930)"/>
    <wire from="(1120,1020)" to="(1320,1020)"/>
    <wire from="(1120,1140)" to="(1320,1140)"/>
    <wire from="(1120,1260)" to="(1320,1260)"/>
    <wire from="(1120,1380)" to="(1320,1380)"/>
    <wire from="(1120,540)" to="(1320,540)"/>
    <wire from="(1120,660)" to="(1320,660)"/>
    <wire from="(1120,780)" to="(1320,780)"/>
    <wire from="(1120,900)" to="(1320,900)"/>
    <wire from="(1190,1440)" to="(1190,1490)"/>
    <wire from="(1190,1440)" to="(1210,1440)"/>
    <wire from="(1190,1490)" to="(1270,1490)"/>
    <wire from="(1230,1440)" to="(1290,1440)"/>
    <wire from="(1270,1090)" to="(1270,1210)"/>
    <wire from="(1270,1090)" to="(1350,1090)"/>
    <wire from="(1270,1210)" to="(1270,1330)"/>
    <wire from="(1270,1210)" to="(1350,1210)"/>
    <wire from="(1270,1330)" to="(1270,1490)"/>
    <wire from="(1270,1330)" to="(1350,1330)"/>
    <wire from="(1270,1490)" to="(1350,1490)"/>
    <wire from="(1270,610)" to="(1270,730)"/>
    <wire from="(1270,610)" to="(1350,610)"/>
    <wire from="(1270,730)" to="(1270,850)"/>
    <wire from="(1270,730)" to="(1350,730)"/>
    <wire from="(1270,850)" to="(1270,970)"/>
    <wire from="(1270,850)" to="(1350,850)"/>
    <wire from="(1270,970)" to="(1270,1090)"/>
    <wire from="(1270,970)" to="(1350,970)"/>
    <wire from="(1290,1040)" to="(1290,1160)"/>
    <wire from="(1290,1040)" to="(1320,1040)"/>
    <wire from="(1290,1160)" to="(1290,1280)"/>
    <wire from="(1290,1160)" to="(1320,1160)"/>
    <wire from="(1290,1280)" to="(1290,1400)"/>
    <wire from="(1290,1280)" to="(1320,1280)"/>
    <wire from="(1290,1400)" to="(1290,1440)"/>
    <wire from="(1290,1400)" to="(1320,1400)"/>
    <wire from="(1290,560)" to="(1290,680)"/>
    <wire from="(1290,560)" to="(1320,560)"/>
    <wire from="(1290,680)" to="(1290,800)"/>
    <wire from="(1290,680)" to="(1320,680)"/>
    <wire from="(1290,800)" to="(1290,920)"/>
    <wire from="(1290,800)" to="(1320,800)"/>
    <wire from="(1290,920)" to="(1290,1040)"/>
    <wire from="(1290,920)" to="(1320,920)"/>
    <wire from="(1310,1060)" to="(1310,1180)"/>
    <wire from="(1310,1060)" to="(1320,1060)"/>
    <wire from="(1310,1180)" to="(1310,1300)"/>
    <wire from="(1310,1180)" to="(1320,1180)"/>
    <wire from="(1310,1300)" to="(1310,1420)"/>
    <wire from="(1310,1300)" to="(1320,1300)"/>
    <wire from="(1310,1420)" to="(1310,1470)"/>
    <wire from="(1310,1420)" to="(1320,1420)"/>
    <wire from="(1310,580)" to="(1310,700)"/>
    <wire from="(1310,580)" to="(1320,580)"/>
    <wire from="(1310,700)" to="(1310,820)"/>
    <wire from="(1310,700)" to="(1320,700)"/>
    <wire from="(1310,820)" to="(1310,940)"/>
    <wire from="(1310,820)" to="(1320,820)"/>
    <wire from="(1310,940)" to="(1310,1060)"/>
    <wire from="(1310,940)" to="(1320,940)"/>
    <wire from="(1350,1080)" to="(1350,1090)"/>
    <wire from="(1350,1200)" to="(1350,1210)"/>
    <wire from="(1350,1320)" to="(1350,1330)"/>
    <wire from="(1350,1440)" to="(1350,1490)"/>
    <wire from="(1350,1490)" to="(1440,1490)"/>
    <wire from="(1350,600)" to="(1350,610)"/>
    <wire from="(1350,720)" to="(1350,730)"/>
    <wire from="(1350,840)" to="(1350,850)"/>
    <wire from="(1350,960)" to="(1350,970)"/>
    <wire from="(1380,1020)" to="(1390,1020)"/>
    <wire from="(1380,1140)" to="(1390,1140)"/>
    <wire from="(1380,1260)" to="(1390,1260)"/>
    <wire from="(1380,1380)" to="(1390,1380)"/>
    <wire from="(1380,540)" to="(1390,540)"/>
    <wire from="(1380,660)" to="(1390,660)"/>
    <wire from="(1380,780)" to="(1390,780)"/>
    <wire from="(1380,900)" to="(1390,900)"/>
    <wire from="(1390,1020)" to="(1550,1020)"/>
    <wire from="(1390,1100)" to="(1390,1140)"/>
    <wire from="(1390,1140)" to="(1580,1140)"/>
    <wire from="(1390,1220)" to="(1390,1260)"/>
    <wire from="(1390,1260)" to="(1610,1260)"/>
    <wire from="(1390,1340)" to="(1390,1380)"/>
    <wire from="(1390,1380)" to="(1640,1380)"/>
    <wire from="(1390,500)" to="(1390,540)"/>
    <wire from="(1390,540)" to="(1430,540)"/>
    <wire from="(1390,620)" to="(1390,660)"/>
    <wire from="(1390,660)" to="(1460,660)"/>
    <wire from="(1390,740)" to="(1390,780)"/>
    <wire from="(1390,780)" to="(1490,780)"/>
    <wire from="(1390,860)" to="(1390,900)"/>
    <wire from="(1390,900)" to="(1520,900)"/>
    <wire from="(1390,980)" to="(1390,1020)"/>
    <wire from="(1440,1490)" to="(1470,1490)"/>
    <wire from="(1440,570)" to="(1440,1490)"/>
    <wire from="(1460,550)" to="(2030,550)"/>
    <wire from="(1470,1490)" to="(1500,1490)"/>
    <wire from="(1470,690)" to="(1470,1490)"/>
    <wire from="(1490,670)" to="(1920,670)"/>
    <wire from="(150,500)" to="(260,500)"/>
    <wire from="(150,540)" to="(200,540)"/>
    <wire from="(150,700)" to="(230,700)"/>
    <wire from="(1500,1490)" to="(1530,1490)"/>
    <wire from="(1500,810)" to="(1500,1490)"/>
    <wire from="(1520,790)" to="(1930,790)"/>
    <wire from="(1530,1490)" to="(1560,1490)"/>
    <wire from="(1530,930)" to="(1530,1490)"/>
    <wire from="(1550,910)" to="(1940,910)"/>
    <wire from="(1560,1050)" to="(1560,1490)"/>
    <wire from="(1560,1490)" to="(1590,1490)"/>
    <wire from="(1580,1030)" to="(1950,1030)"/>
    <wire from="(1580,370)" to="(1580,390)"/>
    <wire from="(1580,370)" to="(1590,370)"/>
    <wire from="(1580,390)" to="(2050,390)"/>
    <wire from="(1590,1170)" to="(1590,1490)"/>
    <wire from="(1590,1490)" to="(1620,1490)"/>
    <wire from="(1610,1150)" to="(1960,1150)"/>
    <wire from="(1620,1290)" to="(1620,1490)"/>
    <wire from="(1620,1490)" to="(1650,1490)"/>
    <wire from="(1640,1270)" to="(1970,1270)"/>
    <wire from="(1650,1410)" to="(1650,1490)"/>
    <wire from="(1670,1390)" to="(1980,1390)"/>
    <wire from="(1920,560)" to="(1920,670)"/>
    <wire from="(1920,560)" to="(2030,560)"/>
    <wire from="(1930,570)" to="(1930,790)"/>
    <wire from="(1930,570)" to="(2030,570)"/>
    <wire from="(1940,580)" to="(1940,910)"/>
    <wire from="(1940,580)" to="(2030,580)"/>
    <wire from="(1950,590)" to="(1950,1030)"/>
    <wire from="(1950,590)" to="(2030,590)"/>
    <wire from="(1960,600)" to="(1960,1150)"/>
    <wire from="(1960,600)" to="(2030,600)"/>
    <wire from="(1970,610)" to="(1970,1270)"/>
    <wire from="(1970,610)" to="(2030,610)"/>
    <wire from="(1980,620)" to="(1980,1390)"/>
    <wire from="(1980,620)" to="(2030,620)"/>
    <wire from="(200,1470)" to="(1310,1470)"/>
    <wire from="(200,540)" to="(200,1470)"/>
    <wire from="(200,540)" to="(840,540)"/>
    <wire from="(2050,390)" to="(2050,540)"/>
    <wire from="(230,1490)" to="(1190,1490)"/>
    <wire from="(230,560)" to="(230,700)"/>
    <wire from="(230,560)" to="(890,560)"/>
    <wire from="(230,700)" to="(230,1490)"/>
    <wire from="(230,700)" to="(390,700)"/>
    <wire from="(260,500)" to="(260,760)"/>
    <wire from="(260,500)" to="(720,500)"/>
    <wire from="(260,760)" to="(390,760)"/>
    <wire from="(290,580)" to="(290,680)"/>
    <wire from="(290,580)" to="(750,580)"/>
    <wire from="(290,680)" to="(290,740)"/>
    <wire from="(290,680)" to="(330,680)"/>
    <wire from="(290,740)" to="(390,740)"/>
    <wire from="(320,450)" to="(320,630)"/>
    <wire from="(320,450)" to="(350,450)"/>
    <wire from="(320,630)" to="(650,630)"/>
    <wire from="(350,680)" to="(390,680)"/>
    <wire from="(390,440)" to="(640,440)"/>
    <wire from="(420,690)" to="(450,690)"/>
    <wire from="(420,750)" to="(450,750)"/>
    <wire from="(450,720)" to="(450,740)"/>
    <wire from="(520,310)" to="(530,310)"/>
    <wire from="(530,310)" to="(530,390)"/>
    <wire from="(530,310)" to="(670,310)"/>
    <wire from="(530,390)" to="(550,390)"/>
    <wire from="(590,400)" to="(620,400)"/>
    <wire from="(620,360)" to="(620,400)"/>
    <wire from="(620,360)" to="(680,360)"/>
    <wire from="(620,400)" to="(640,400)"/>
    <wire from="(640,780)" to="(650,780)"/>
    <wire from="(650,630)" to="(650,780)"/>
    <wire from="(650,630)" to="(770,630)"/>
    <wire from="(660,330)" to="(670,330)"/>
    <wire from="(680,340)" to="(680,360)"/>
    <wire from="(690,420)" to="(860,420)"/>
    <wire from="(700,320)" to="(1070,320)"/>
    <wire from="(720,430)" to="(720,500)"/>
    <wire from="(720,430)" to="(800,430)"/>
    <wire from="(750,450)" to="(750,580)"/>
    <wire from="(750,450)" to="(800,450)"/>
    <wire from="(750,580)" to="(750,610)"/>
    <wire from="(750,580)" to="(930,580)"/>
    <wire from="(750,610)" to="(770,610)"/>
    <wire from="(830,440)" to="(860,440)"/>
    <wire from="(840,460)" to="(840,540)"/>
    <wire from="(840,460)" to="(860,460)"/>
    <wire from="(890,480)" to="(890,560)"/>
    <wire from="(920,420)" to="(930,420)"/>
    <wire from="(930,420)" to="(1590,420)"/>
    <wire from="(930,420)" to="(930,480)"/>
    <wire from="(930,500)" to="(930,580)"/>
    <wire from="(990,610)" to="(1030,610)"/>
    <wire from="(990,630)" to="(1060,630)"/>
    <wire from="(990,650)" to="(1050,650)"/>
    <wire from="(990,670)" to="(1040,670)"/>
    <wire from="(990,690)" to="(1030,690)"/>
    <wire from="(990,710)" to="(1020,710)"/>
    <wire from="(990,730)" to="(1010,730)"/>
    <wire from="(990,750)" to="(1000,750)"/>
  </circuit>
  <vhdl name="uart_rx">--------------------------------------------------------------------------------
-- Project : Semester Project - UART on FPGA
-- File    : uart_rx.vhd
-- Author  : Selma Benhassine
-- Date    :
--
--------------------------------------------------------------------------------
-- Description :
-- UART receiver module for asynchronous serial communication. 
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

ENTITY uart_rx IS
    PORT (
        i_Clock      : IN  std_logic;                    -- System clock input
        i_RX_Serial  : IN  std_logic;                    -- Serial data input
        o_RX_Byte    : OUT std_logic_vector(7 downto 0); -- Output byte
        o_RX_DV      : OUT std_logic                    -- Data valid signal
    );
END uart_rx;

ARCHITECTURE Behavioral OF uart_rx IS
    type state_type IS (IDLE, RX_START_BIT, RX_DATA_BITS, RX_STOP_BIT, CLEANUP);
    signal r_SM_Main : state_type := IDLE;
    signal r_Start_Done : std_logic := '0';
    signal r_Clock_Count : unsigned(23 downto 0) := (others =&gt; '0');
    signal r_Bit_Index : unsigned(2 downto 0) := (others =&gt; '0');
    signal r_RX_Byte : std_logic_vector(7 downto 0) := (others =&gt; '0');
    signal r_RX_DV : std_logic := '0';
    signal r_FSM_Mode : std_logic_vector(2 downto 0) := (others =&gt; '0'); 
    constant N : integer := 3;  -- Number of cycles to confirm bit
    signal bit_counter : integer range 0 to N := 0;  -- N is the number of clock cycles for confirmation
    
    constant CLKS_PER_BIT : integer := 15;  -- Clock cycles per bit, baud rate for 1.25MHz clock works from 77100-80900
    
begin
    process(i_Clock)
    begin
        if rising_edge(i_Clock) then            
            case r_SM_Main is
                when IDLE =&gt;
                    r_FSM_Mode &lt;= "001";
                    r_RX_DV &lt;= '0';
                    r_Clock_Count &lt;= (others =&gt; '0');
                    r_Bit_Index &lt;= (others =&gt; '0');
                    r_Start_Done &lt;= '0';

                    if i_RX_Serial = '0' then
                        bit_counter &lt;= bit_counter + 1;
                        if bit_counter &gt;= N then  -- Confirmed low for N clock cycles
                            r_SM_Main &lt;= RX_START_BIT;
                            bit_counter &lt;= 0;  -- Reset counter
                        end if;
                    else
                        bit_counter &lt;= 0;  -- Reset counter if high is detected
                    end if;

                when RX_START_BIT =&gt;
                    r_FSM_Mode &lt;= "010";
                    r_Clock_Count &lt;= r_Clock_Count + 1;
                    if r_Clock_Count = CLKS_PER_BIT/2 then
                        if i_RX_Serial = '0' then
                            r_Start_Done &lt;= '1';  -- Midpoint confirmation of the start bit
                        else
                            r_Start_Done &lt;= '0';
                        end if;
                    end if;
                    if r_Clock_Count = CLKS_PER_BIT - 1 then
                        r_Clock_Count &lt;= (others =&gt; '0');  -- Reset the counter for use in the next state
                        if r_Start_Done = '1' then
                            r_SM_Main &lt;= RX_DATA_BITS;  -- Transition to data bits after confirming start bit
                        else
                            r_SM_Main &lt;= IDLE;  -- Reset if the start bit is not sustained
                        end if;
                    end if;

                when RX_DATA_BITS =&gt;
                    r_FSM_Mode &lt;= "011";
                    r_Clock_Count &lt;= r_Clock_Count + 1;
                    if r_Clock_Count = CLKS_PER_BIT/2 then
                        r_RX_Byte(to_integer(r_Bit_Index)) &lt;= i_RX_Serial;  -- Sample at mid-point
                    end if;
                    if r_Clock_Count = CLKS_PER_BIT - 1 then
                        r_Clock_Count &lt;= (others =&gt; '0');    -- Reset for next bit
                        if r_Bit_Index &lt; 7 then
                            r_Bit_Index &lt;= r_Bit_Index + 1;
                        else
                            r_Bit_Index &lt;= (others =&gt; '0');
                            r_SM_Main &lt;= RX_STOP_BIT;  -- Proceed to stop bit verification
                        end if;
                    end if;

                -- eventually check for parity bit

                when RX_STOP_BIT =&gt;
                    r_FSM_Mode &lt;= "100";
                    r_Clock_Count &lt;= r_Clock_Count + 1;
                    if r_Clock_Count = CLKS_PER_BIT/2 then
                        if i_RX_Serial = '1' then
                            r_RX_DV &lt;= '1';  -- Midpoint confirmation of the stop bit
                        end if;
                    end if;
                    if r_Clock_Count = CLKS_PER_BIT - 1 then
                        r_Clock_Count &lt;= (others =&gt; '0');
                        r_SM_Main &lt;= CLEANUP;  -- Cleanup and prepare to return to IDLE
                    end if;

                when CLEANUP =&gt;
                    r_FSM_Mode &lt;= "101";
                    r_SM_Main &lt;= IDLE;
                    r_RX_DV &lt;= '0';

                when others =&gt;
                    r_SM_Main &lt;= IDLE;

            end case;
        end if;
    end process;

    
    o_RX_Byte &lt;= r_RX_Byte;
    o_RX_DV &lt;= r_RX_DV;

END ARCHITECTURE Behavioral;

</vhdl>
  <vhdl name="uart_tx">--------------------------------------------------------------------------------
-- Project : Semester Project - UART on FPGA
-- File    : UART_TX
-- Author   : Selma Benhassine
-- Date    :
--
--------------------------------------------------------------------------------
-- Description :
-- The transmitter file for the UART_transmission portion of the project
--
--------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity uart_tx is
    Port (
        clk_50M : in STD_LOGIC;               -- Input clock, assumed 50 MHz
        data_raw : in STD_LOGIC_VECTOR (7 downto 0);  -- Data byte (8 bits) to transmit
        trigger_raw : in STD_LOGIC;           -- Tells module to begin transmission of data_raw byte
        busy : out STD_LOGIC;                 -- Flag to indicate a transmission is in progress
        serial_out : out STD_LOGIC            -- UART output serial datastream
    );
end uart_tx;


architecture Behavioral of uart_tx is
	 
	constant CLKS_PER_BIT: integer := 15; -- Clock cycles per bit, baud rate for 1.25MHz clock works from 69500-77400
--                                                  1
--     CLKS_PER_BIT =  F_clk [cycles/sec] * --------------------
--                                           baud_rate[bit/sec]
	 
    type state_type is (STATE_IDLE, STATE_TRANSMITTING, STATE_CLEANUP);
    signal tx_state : state_type := STATE_IDLE;  -- State variable for main finite state machine
    signal data_aug : std_logic_vector(9 downto 0) := (others =&gt; '0');  -- Augmented data word to transmit that includes START bit, data byte, and STOP BIT
    signal tx_index : unsigned(3 downto 0) := (others =&gt; '0');  -- Index of bit currently transmitting
    signal bit_delay : unsigned(31 downto 0) := (others =&gt; '0'); -- Timer to regulate baud rate
   

    signal trigger_0 : std_logic := '0';  -- Synchronizer on trigger input signal
    signal trigger : std_logic := '0';    -- Synchronizer on trigger input signal

begin

    process (clk_50M) begin
        if rising_edge(clk_50M) then
            case tx_state is
                -- Wait for trigger condition indicating it's time to transmit a byte.
                when STATE_IDLE =&gt;
                    busy &lt;= '0';                 -- Indicate that transmitter is idle.
                    serial_out &lt;= '1';           -- Idle output HIGH, per standard UART behavior.
                    if trigger = '1' then        -- Check if received trigger to TX a byte
                        data_aug &lt;= '1' &amp; data_raw &amp; '0';   -- Create augmented byte with start and stop bits, eventually add parity bit
                        busy &lt;= '1';                        -- Indicate that transmitter is busy.
                        bit_delay &lt;= (others =&gt; '0');       -- Clear timer used to track duration of each bit
                        tx_index &lt;= (others =&gt; '0');        -- Point to first bit of data_aug to TX, namely the start bit
                        tx_state &lt;= STATE_TRANSMITTING;     -- Move on to next state
                    end if;
                    
                -- Transmit all 10 bits with proper the proper duration per bit based on the selected baud rate.
                when STATE_TRANSMITTING =&gt;
                    serial_out &lt;= data_aug(to_integer(tx_index));  -- Set output based on current bit to transmit
                    bit_delay &lt;= bit_delay + 1;                     -- Keep track of duration to hold this bit
                    if bit_delay &gt; to_unsigned(CLKS_PER_BIT, 32) then  -- Check if bit duration has expired
                        if tx_index = "1001" then                  -- Check if just transmitted the final bit, i.e. the STOP bit
                            tx_state &lt;= STATE_CLEANUP;            -- Move on to next state
                        else
                            tx_index &lt;= tx_index + 1;             -- Still more bits to send so, point to next bit
                            bit_delay &lt;= (others =&gt; '0');         -- Clear counter used to regulate baud rate
                        end if;
                    end if;
                    
                -- Pause for a few bit durations after full byte transmitted.
                when STATE_CLEANUP =&gt;
                    bit_delay &lt;= bit_delay + 1;                    -- Keep track of how long been in cleanup state
                    if bit_delay &gt; to_unsigned(5 * CLKS_PER_BIT, 32) then  -- If paused HIGH long enough, then return to idle state
                        tx_state &lt;= STATE_IDLE;
                    end if;
                    
                -- Should never get here, but if do, return to IDLE
                when others =&gt;
                    tx_state &lt;= STATE_IDLE;
            end case;
        end if;
    end process;

    -- Synchronizer for trigger input
    process (clk_50M) begin
        if rising_edge(clk_50M) then
            trigger_0 &lt;= trigger_raw;
            trigger &lt;= trigger_0;
        end if;
    end process;

end Behavioral;
</vhdl>
  <vhdl name="uart_tx_tester">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity uart_tx_tester is
    Port (
        clk_50M : in STD_LOGIC;               -- Input clock, assumed 50 MHz
        run_test_raw : in STD_LOGIC;          -- HIGH indicates to continuously run test
        tx_busy : in STD_LOGIC;               -- HIGH indicates transmitter is busy 
        byte_str : in STD_LOGIC_VECTOR(63 downto 0); -- Test to output (8 bytes)
        data_out : out STD_LOGIC_VECTOR (7 downto 0);  -- Data byte (8 bits) to transmit
        trigger : out STD_LOGIC               -- Trigger to tell UART module to begin transmission
    );
end uart_tx_tester;

architecture Behavioral of uart_tx_tester is

    signal run_test_0 : std_logic := '0';          -- Synchronizer for 'start test' switch input
    signal run_test : std_logic := '0';            -- Synchronizer for 'start test' switch input
    signal run_test_prev : std_logic := '0';       -- Previous state of run_test
    signal tester_state : unsigned(5 downto 0) := (others =&gt; '0');  -- FSM state variable
    signal byte_index : unsigned(5 downto 0) := (others =&gt; '0');     -- Pointer to the current byte to transmit in the message
    signal pause_delay : unsigned(31 downto 0) := (others =&gt; '0');  -- Counter for delay between re-transmissions of message
    signal trigger_ctr : unsigned(5 downto 0) := (others =&gt; '0');    -- Delay to hold trigger high, in clock cycles

    signal extended_byte_str : std_logic_vector(71 downto 0);        -- Extended byte string (9 bytes)

    constant STATE_IDLE : unsigned(5 downto 0) := "000000";          -- Legal values for tester_state
    constant STATE_LOAD : unsigned(5 downto 0) := "000010";          -- Legal values for tester_state
    constant STATE_TRIGGER : unsigned(5 downto 0) := "000100";       -- Legal values for tester_state
    constant STATE_POLL_BUSY : unsigned(5 downto 0) := "001000";     -- Legal values for tester_state
    constant STATE_PAUSE : unsigned(5 downto 0) := "010000";         -- Legal values for tester_state

    constant MSG_DELAY : unsigned(31 downto 0) := to_unsigned(100, 32);  -- Delay between messages re-transmissions, in clk cycles
    constant BYTE_STR_LENGTH : unsigned(5 downto 0) := to_unsigned(8, 6);    -- Length of the byte string (number of bytes - 1, now 8+1=9)

begin

    -- Synchronizer for "run_test" input since, as tested, this comes from a 
    -- slide switch on the DE10-Lite board, which is not synchronous with the
    -- clock.
    process (clk_50M) begin
        if rising_edge(clk_50M) then
            run_test_0 &lt;= run_test_raw;
            run_test &lt;= run_test_0;
        end if;
    end process;

    -- Process to detect the rising edge of run_test
    process (clk_50M) begin
        if rising_edge(clk_50M) then
            run_test_prev &lt;= run_test;
        end if;
    end process;

    -- Extend the byte string with '00001010' at the end
    extended_byte_str &lt;= byte_str &amp; "00001010";

    -- Main Finite State Machine that sequences the test
    process (clk_50M) begin
        if rising_edge(clk_50M) then
            case tester_state is
                -- Wait for request to begin test.
                when STATE_IDLE =&gt;
                    trigger &lt;= '0';
                    if run_test = '1' and run_test_prev = '0' then
                        byte_index &lt;= (others =&gt; '0');  -- Initialize byte_index to zero
                        tester_state &lt;= STATE_LOAD;
                    end if;
                    
                -- Output next byte to transmitter module, with trigger still low
                -- so it won't transmit yet.
                when STATE_LOAD =&gt;
                    trigger &lt;= '0';
                    data_out &lt;= extended_byte_str(to_integer(byte_index) * 8 + 7 downto to_integer(byte_index) * 8);
                    trigger_ctr &lt;= to_unsigned(5, 6);
                    tester_state &lt;= STATE_TRIGGER;
                    
                -- Now that previous state output'd the next byte to transmit,
                -- assert the trigger signal to begin the transmission.
                when STATE_TRIGGER =&gt;
                    trigger &lt;= '1';
                    trigger_ctr &lt;= trigger_ctr - 1;
                    if trigger_ctr = 0 then
                        tester_state &lt;= STATE_POLL_BUSY;
                    end if;
                    
                -- Clear trigger signal, and wait until all bits shifted out
                -- for the current byte.
                when STATE_POLL_BUSY =&gt;
                    trigger &lt;= '0';
                    if tx_busy = '0' then
                        if byte_index = BYTE_STR_LENGTH then
                            pause_delay &lt;= (others =&gt; '0');
                            tester_state &lt;= STATE_PAUSE;
                        else
                            byte_index &lt;= byte_index + 1;
                            tester_state &lt;= STATE_LOAD;
                        end if;
                    end if;
                    
                -- Once transmitted full message, pause before 
                -- transmitting message again for testing convenience.
                when STATE_PAUSE =&gt;
                    pause_delay &lt;= pause_delay + 1;
                    if pause_delay &gt; to_integer(MSG_DELAY) then
                        tester_state &lt;= STATE_IDLE;
                    end if;
                    
                -- Should never get here, but if do, return to IDLE
                when others =&gt;
                    tester_state &lt;= STATE_IDLE;
            end case;
        end if;
    end process;

end Behavioral;
</vhdl>
</project>
