<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.7.2" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.7.2(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Splitter">
      <a name="facing" val="west"/>
    </tool>
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <lib desc="#HDL-IP" name="12">
    <tool name="VHDL Entity">
      <a name="content">library IEEE;&#13;
use IEEE.STD_LOGIC_1164.ALL;&#13;
use IEEE.NUMERIC_STD.ALL;&#13;
&#13;
entity uart_tx_tester is&#13;
    Port (&#13;
        clk_50M : in STD_LOGIC;               -- Input clock, assumed 50 MHz&#13;
        run_test_raw : in STD_LOGIC;          -- HIGH indicates to continuously run test&#13;
        tx_busy : in STD_LOGIC;               -- HIGH indicates transmitter is busy &#13;
        data_out : out STD_LOGIC_VECTOR (7 downto 0);  -- Data byte (8 bits) to transmit&#13;
        trigger : out STD_LOGIC                -- Trigger to tell UART module to begin transmission&#13;
    );&#13;
end uart_tx_tester;&#13;
&#13;
architecture Behavioral of uart_tx_tester is&#13;
&#13;
    signal run_test_0 : std_logic := '0';          -- Synchronizer for 'start test' switch input&#13;
    signal run_test : std_logic := '0';            -- Synchronizer for 'start test' switch input&#13;
    signal tester_state : unsigned(5 downto 0) := (others =&gt; '0');  -- FSM state variable&#13;
    -- signal byte_index : unsigned(31 downto 0) := unsigned(8*16)-unsigned(1);          -- Pointer to beginning of next byte to transmit in 16 byte message&#13;
    constant BYTE_INDEX_INIT: natural := (8*16)-1; -- Calculate the initial value for byte_index&#13;
    signal byte_index : unsigned(31 downto 0) := to_unsigned(BYTE_INDEX_INIT, 32); -- Initialize byte_index with the calculated value&#13;
	 signal pause_delay : unsigned(31 downto 0) := (others =&gt; '0');  -- Counter for delay between re-transmissions of message&#13;
    signal trigger_ctr : unsigned(5 downto 0) := (others =&gt; '0');    -- Delay to hold trigger high, in clock cycles&#13;
&#13;
    constant STATE_IDLE : unsigned(5 downto 0) := "000000";          -- Legal values for tester_state&#13;
    constant STATE_LOAD : unsigned(5 downto 0) := "000010";          -- Legal values for tester_state&#13;
    constant STATE_TRIGGER : unsigned(5 downto 0) := "000100";       -- Legal values for tester_state&#13;
    constant STATE_POLL_BUSY : unsigned(5 downto 0) := "001000";     -- Legal values for tester_state&#13;
    constant STATE_PAUSE : unsigned(5 downto 0) := "010000";         -- Legal values for tester_state&#13;
&#13;
    constant MSG_DELAY : unsigned(31 downto 0) := to_unsigned(100_000_000, 32);  -- Delay between messages re-transmissions, in clk cycles&#13;
	 &#13;
	 -- Message to transmit&#13;
    signal byte_str : std_logic_vector((8*16)-1 downto 0) := "01001000" &amp; "01100101" &amp; "01101100" &amp; "01101100" &amp; "01101111" &amp; "00100000" &amp; "01010111" &amp; "01101111" &amp;&#13;
                                                            "01110010" &amp; "01101100" &amp; "01100100" &amp; "00100001" &amp; "00100000" &amp; "00100000" &amp; "00100000" &amp; "00100000";&#13;
&#13;
&#13;
begin&#13;
&#13;
    -- Synchronizer for "run_test" input since, as tested, this comes from a &#13;
    -- slide switch on the DE10-Lite board, which is not synchronous with the&#13;
    -- clock.&#13;
    process (clk_50M) begin&#13;
        if rising_edge(clk_50M) then&#13;
            run_test_0 &lt;= run_test_raw;&#13;
            run_test &lt;= run_test_0;&#13;
        end if;&#13;
    end process;&#13;
&#13;
    -- Main Finite State Machine that sequences the test&#13;
    process (clk_50M) begin&#13;
        if rising_edge(clk_50M) then&#13;
            case tester_state is&#13;
                -- Wait for request to begin test.&#13;
                when STATE_IDLE =&gt;&#13;
                    trigger &lt;= '0';&#13;
                    if run_test = '1' then&#13;
                        byte_index &lt;= to_unsigned(BYTE_INDEX_INIT, 32);&#13;
                        tester_state &lt;= STATE_LOAD;&#13;
                    end if;&#13;
                    &#13;
                -- Output next byte to transmitter module, with trigger still low&#13;
                -- so it won't transmit yet.&#13;
                when STATE_LOAD =&gt;&#13;
                    trigger &lt;= '0';&#13;
                    data_out &lt;= byte_str(to_integer(byte_index) downto to_integer(byte_index)-7);&#13;
                    trigger_ctr &lt;= to_unsigned(5, 6);&#13;
                    tester_state &lt;= STATE_TRIGGER;&#13;
                    &#13;
                -- Now that previous state output'd the next byte to transmit,&#13;
                -- assert the trigger signal to begin the transmission.&#13;
                when STATE_TRIGGER =&gt;&#13;
                    trigger &lt;= '1';&#13;
                    trigger_ctr &lt;= trigger_ctr - 1;&#13;
                    if trigger_ctr = 0 then&#13;
                        tester_state &lt;= STATE_POLL_BUSY;&#13;
                    end if;&#13;
                    &#13;
                -- Clear trigger signal, and wait until all bits shifted out&#13;
                -- for the current byte.&#13;
                when STATE_POLL_BUSY =&gt;&#13;
                    trigger &lt;= '0';&#13;
                    if tx_busy = '0' then&#13;
                        if byte_index &lt;= 7 then&#13;
                            pause_delay &lt;= (others =&gt; '0');&#13;
                            tester_state &lt;= STATE_PAUSE;&#13;
                        else&#13;
                            byte_index &lt;= byte_index - 8;&#13;
                            tester_state &lt;= STATE_LOAD;&#13;
                        end if;&#13;
                    end if;&#13;
                    &#13;
                -- Once transmitted full message, pause before &#13;
                -- transmitting message again for testing convenience.&#13;
                when STATE_PAUSE =&gt;&#13;
                    pause_delay &lt;= pause_delay + 1;&#13;
                    if pause_delay &gt; to_integer(MSG_DELAY) then&#13;
                        tester_state &lt;= STATE_IDLE;&#13;
                    end if;&#13;
                    &#13;
                -- Should never get here, but if do, return to IDLE&#13;
                when others =&gt;&#13;
                    tester_state &lt;= STATE_IDLE;&#13;
            end case;&#13;
        end if;&#13;
    end process;&#13;
&#13;
end Behavioral;&#13;
</a>
    </tool>
  </lib>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Menu Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="4.0"/>
    <comp lib="0" loc="(250,260)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(250,300)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(260,230)" name="Clock"/>
    <comp lib="0" loc="(520,230)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(520,280)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="12" loc="(310,190)" name="VHDL Entity">
      <a name="content">library IEEE;&#13;
use IEEE.STD_LOGIC_1164.ALL;&#13;
use IEEE.NUMERIC_STD.ALL;&#13;
&#13;
entity uart_tx_tester is&#13;
    Port (&#13;
        clk_50M : in STD_LOGIC;               -- Input clock, assumed 50 MHz&#13;
        run_test_raw : in STD_LOGIC;          -- HIGH indicates to continuously run test&#13;
        tx_busy : in STD_LOGIC;               -- HIGH indicates transmitter is busy &#13;
        data_out : out STD_LOGIC_VECTOR (7 downto 0);  -- Data byte (8 bits) to transmit&#13;
        trigger : out STD_LOGIC                -- Trigger to tell UART module to begin transmission&#13;
    );&#13;
end uart_tx_tester;&#13;
&#13;
architecture Behavioral of uart_tx_tester is&#13;
&#13;
    signal run_test_0 : std_logic := '0';          -- Synchronizer for 'start test' switch input&#13;
    signal run_test : std_logic := '0';            -- Synchronizer for 'start test' switch input&#13;
    signal tester_state : unsigned(5 downto 0) := (others =&gt; '0');  -- FSM state variable&#13;
    -- signal byte_index : unsigned(31 downto 0) := unsigned(8*16)-unsigned(1);          -- Pointer to beginning of next byte to transmit in 16 byte message&#13;
    constant BYTE_INDEX_INIT: natural := (8*16)-1; -- Calculate the initial value for byte_index&#13;
    signal byte_index : unsigned(31 downto 0) := to_unsigned(BYTE_INDEX_INIT, 32); -- Initialize byte_index with the calculated value&#13;
	 signal pause_delay : unsigned(31 downto 0) := (others =&gt; '0');  -- Counter for delay between re-transmissions of message&#13;
    signal trigger_ctr : unsigned(5 downto 0) := (others =&gt; '0');    -- Delay to hold trigger high, in clock cycles&#13;
&#13;
    constant STATE_IDLE : unsigned(5 downto 0) := "000000";          -- Legal values for tester_state&#13;
    constant STATE_LOAD : unsigned(5 downto 0) := "000010";          -- Legal values for tester_state&#13;
    constant STATE_TRIGGER : unsigned(5 downto 0) := "000100";       -- Legal values for tester_state&#13;
    constant STATE_POLL_BUSY : unsigned(5 downto 0) := "001000";     -- Legal values for tester_state&#13;
    constant STATE_PAUSE : unsigned(5 downto 0) := "010000";         -- Legal values for tester_state&#13;
&#13;
    constant MSG_DELAY : unsigned(31 downto 0) := to_unsigned(100_000_000, 32);  -- Delay between messages re-transmissions, in clk cycles&#13;
	 &#13;
	 -- Message to transmit&#13;
    signal byte_str : std_logic_vector((8*16)-1 downto 0) := "01001000" &amp; "01100101" &amp; "01101100" &amp; "01101100" &amp; "01101111" &amp; "00100000" &amp; "01010111" &amp; "01101111" &amp;&#13;
                                                            "01110010" &amp; "01101100" &amp; "01100100" &amp; "00100001" &amp; "00100000" &amp; "00100000" &amp; "00100000" &amp; "00100000";&#13;
&#13;
&#13;
begin&#13;
&#13;
    -- Synchronizer for "run_test" input since, as tested, this comes from a &#13;
    -- slide switch on the DE10-Lite board, which is not synchronous with the&#13;
    -- clock.&#13;
    process (clk_50M) begin&#13;
        if rising_edge(clk_50M) then&#13;
            run_test_0 &lt;= run_test_raw;&#13;
            run_test &lt;= run_test_0;&#13;
        end if;&#13;
    end process;&#13;
&#13;
    -- Main Finite State Machine that sequences the test&#13;
    process (clk_50M) begin&#13;
        if rising_edge(clk_50M) then&#13;
            case tester_state is&#13;
                -- Wait for request to begin test.&#13;
                when STATE_IDLE =&gt;&#13;
                    trigger &lt;= '0';&#13;
                    if run_test = '1' then&#13;
                        byte_index &lt;= to_unsigned(BYTE_INDEX_INIT, 32);&#13;
                        tester_state &lt;= STATE_LOAD;&#13;
                    end if;&#13;
                    &#13;
                -- Output next byte to transmitter module, with trigger still low&#13;
                -- so it won't transmit yet.&#13;
                when STATE_LOAD =&gt;&#13;
                    trigger &lt;= '0';&#13;
                    data_out &lt;= byte_str(to_integer(byte_index) downto to_integer(byte_index)-7);&#13;
                    trigger_ctr &lt;= to_unsigned(5, 6);&#13;
                    tester_state &lt;= STATE_TRIGGER;&#13;
                    &#13;
                -- Now that previous state output'd the next byte to transmit,&#13;
                -- assert the trigger signal to begin the transmission.&#13;
                when STATE_TRIGGER =&gt;&#13;
                    trigger &lt;= '1';&#13;
                    trigger_ctr &lt;= trigger_ctr - 1;&#13;
                    if trigger_ctr = 0 then&#13;
                        tester_state &lt;= STATE_POLL_BUSY;&#13;
                    end if;&#13;
                    &#13;
                -- Clear trigger signal, and wait until all bits shifted out&#13;
                -- for the current byte.&#13;
                when STATE_POLL_BUSY =&gt;&#13;
                    trigger &lt;= '0';&#13;
                    if tx_busy = '0' then&#13;
                        if byte_index &lt;= 7 then&#13;
                            pause_delay &lt;= (others =&gt; '0');&#13;
                            tester_state &lt;= STATE_PAUSE;&#13;
                        else&#13;
                            byte_index &lt;= byte_index - 8;&#13;
                            tester_state &lt;= STATE_LOAD;&#13;
                        end if;&#13;
                    end if;&#13;
                    &#13;
                -- Once transmitted full message, pause before &#13;
                -- transmitting message again for testing convenience.&#13;
                when STATE_PAUSE =&gt;&#13;
                    pause_delay &lt;= pause_delay + 1;&#13;
                    if pause_delay &gt; to_integer(MSG_DELAY) then&#13;
                        tester_state &lt;= STATE_IDLE;&#13;
                    end if;&#13;
                    &#13;
                -- Should never get here, but if do, return to IDLE&#13;
                when others =&gt;&#13;
                    tester_state &lt;= STATE_IDLE;&#13;
            end case;&#13;
        end if;&#13;
    end process;&#13;
&#13;
end Behavioral;&#13;
</a>
    </comp>
    <wire from="(250,260)" to="(270,260)"/>
    <wire from="(250,300)" to="(290,300)"/>
    <wire from="(260,230)" to="(310,230)"/>
    <wire from="(270,240)" to="(270,260)"/>
    <wire from="(270,240)" to="(310,240)"/>
    <wire from="(290,250)" to="(290,300)"/>
    <wire from="(290,250)" to="(310,250)"/>
    <wire from="(450,230)" to="(520,230)"/>
    <wire from="(450,240)" to="(500,240)"/>
    <wire from="(500,240)" to="(500,280)"/>
    <wire from="(500,280)" to="(520,280)"/>
  </circuit>
</project>
