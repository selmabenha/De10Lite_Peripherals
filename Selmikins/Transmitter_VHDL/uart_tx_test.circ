<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.7.2" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.7.2(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Splitter">
      <a name="facing" val="west"/>
    </tool>
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <lib desc="#HDL-IP" name="12">
    <tool name="VHDL Entity">
      <a name="content">library IEEE;&#13;
use IEEE.STD_LOGIC_1164.ALL;&#13;
use IEEE.NUMERIC_STD.ALL;&#13;
&#13;
entity uart_tx is&#13;
    Port (&#13;
        clk_50M : in STD_LOGIC;               -- Input clock, assumed 50 MHz&#13;
        data_raw : in STD_LOGIC_VECTOR (7 downto 0);  -- Data byte (8 bits) to transmit&#13;
        trigger_raw : in STD_LOGIC;           -- Tells module to begin transmission of data_raw byte&#13;
        busy : out STD_LOGIC;                 -- Flag to indicate a transmission is in progress&#13;
        serial_out : out STD_LOGIC            -- UART output serial datastream&#13;
    );&#13;
end uart_tx;&#13;
&#13;
architecture Behavioral of uart_tx is&#13;
	 &#13;
	 constant CLKS_PER_BIT: integer := 868;&#13;
	 &#13;
    type state_type is (STATE_IDLE, STATE_TRANSMITTING, STATE_CLEANUP);&#13;
    signal tx_state : state_type := STATE_IDLE;  -- State variable for main finite state machine&#13;
    signal data_aug : std_logic_vector(9 downto 0) := (others =&gt; '0');  -- Augmented data word to transmit that includes START bit, data byte, and STOP BIT&#13;
    signal tx_index : unsigned(3 downto 0) := (others =&gt; '0');  -- Index of bit currently transmitting&#13;
    signal bit_delay : unsigned(31 downto 0) := (others =&gt; '0'); -- Timer to regulate baud rate&#13;
&#13;
    signal trigger_0 : std_logic := '0';  -- Synchronizer on trigger input signal&#13;
    signal trigger : std_logic := '0';    -- Synchronizer on trigger input signal&#13;
&#13;
    -- Localparam CLKS_PER_BIT is not needed in VHDL since it's used as a constant value in the code directly&#13;
&#13;
begin&#13;
&#13;
    process (clk_50M) begin&#13;
        if rising_edge(clk_50M) then&#13;
            case tx_state is&#13;
                -- Wait for trigger condition indicating it's time to transmit a byte.&#13;
                when STATE_IDLE =&gt;&#13;
                    busy &lt;= '0';                 -- Indicate that transmitter is idle.&#13;
                    serial_out &lt;= '1';           -- Idle output HIGH, per standard UART behavior.&#13;
                    if trigger = '1' then        -- Check if received trigger to TX a byte&#13;
                        data_aug &lt;= '1' &amp; data_raw &amp; '0';   -- Create augmented byte with start and stop bits&#13;
                        busy &lt;= '1';                        -- Indicate that transmitter is busy.&#13;
                        bit_delay &lt;= (others =&gt; '0');       -- Clear timer used to track duration of each bit&#13;
                        tx_index &lt;= (others =&gt; '0');        -- Point to first bit of data_aug to TX, namely the start bit&#13;
                        tx_state &lt;= STATE_TRANSMITTING;     -- Move on to next state&#13;
                    end if;&#13;
                    &#13;
                -- Transmit all 10 bits with proper the proper duration per bit based on the selected baud rate.&#13;
                when STATE_TRANSMITTING =&gt;&#13;
                    serial_out &lt;= data_aug(to_integer(tx_index));  -- Set output based on current bit to transmit&#13;
                    bit_delay &lt;= bit_delay + 1;                     -- Keep track of duration to hold this bit&#13;
                    if bit_delay &gt; to_unsigned(CLKS_PER_BIT, 32) then  -- Check if bit duration has expired&#13;
                        if tx_index = "1001" then                  -- Check if just transmitted the final bit, i.e. the STOP bit&#13;
                            tx_state &lt;= STATE_CLEANUP;            -- Move on to next state&#13;
                        else&#13;
                            tx_index &lt;= tx_index + 1;             -- Still more bits to send so, point to next bit&#13;
                            bit_delay &lt;= (others =&gt; '0');         -- Clear counter used to regulate baud rate&#13;
                        end if;&#13;
                    end if;&#13;
                    &#13;
                -- Pause for a few bit durations after full byte transmitted.&#13;
                when STATE_CLEANUP =&gt;&#13;
                    bit_delay &lt;= bit_delay + 1;                    -- Keep track of how long been in cleanup state&#13;
                    if bit_delay &gt; to_unsigned(5 * CLKS_PER_BIT, 32) then  -- If paused HIGH long enough, then return to idle state&#13;
                        tx_state &lt;= STATE_IDLE;&#13;
                    end if;&#13;
                    &#13;
                -- Should never get here, but if do, return to IDLE&#13;
                when others =&gt;&#13;
                    tx_state &lt;= STATE_IDLE;&#13;
            end case;&#13;
        end if;&#13;
    end process;&#13;
&#13;
    -- Synchronizer for trigger input&#13;
    process (clk_50M) begin&#13;
        if rising_edge(clk_50M) then&#13;
            trigger_0 &lt;= trigger_raw;&#13;
            trigger &lt;= trigger_0;&#13;
        end if;&#13;
    end process;&#13;
&#13;
end Behavioral;&#13;
</a>
    </tool>
  </lib>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Menu Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="8000.0"/>
    <comp lib="0" loc="(160,230)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp lib="0" loc="(170,180)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="width" val="8"/>
    </comp>
    <comp lib="0" loc="(210,140)" name="Clock"/>
    <comp lib="0" loc="(480,140)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(490,190)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="12" loc="(280,100)" name="VHDL Entity">
      <a name="content">library IEEE;&#13;
use IEEE.STD_LOGIC_1164.ALL;&#13;
use IEEE.NUMERIC_STD.ALL;&#13;
&#13;
entity uart_tx is&#13;
    Port (&#13;
        clk_50M : in STD_LOGIC;               -- Input clock, assumed 50 MHz&#13;
        data_raw : in STD_LOGIC_VECTOR (7 downto 0);  -- Data byte (8 bits) to transmit&#13;
        trigger_raw : in STD_LOGIC;           -- Tells module to begin transmission of data_raw byte&#13;
        busy : out STD_LOGIC;                 -- Flag to indicate a transmission is in progress&#13;
        serial_out : out STD_LOGIC            -- UART output serial datastream&#13;
    );&#13;
end uart_tx;&#13;
&#13;
architecture Behavioral of uart_tx is&#13;
	 &#13;
	 constant CLKS_PER_BIT: integer := 124;&#13; -- normally 868, but let's try lower
	 &#13;
    type state_type is (STATE_IDLE, STATE_TRANSMITTING, STATE_CLEANUP);&#13;
    signal tx_state : state_type := STATE_IDLE;  -- State variable for main finite state machine&#13;
    signal data_aug : std_logic_vector(9 downto 0) := (others =&gt; '0');  -- Augmented data word to transmit that includes START bit, data byte, and STOP BIT&#13;
    signal tx_index : unsigned(3 downto 0) := (others =&gt; '0');  -- Index of bit currently transmitting&#13;
    signal bit_delay : unsigned(31 downto 0) := (others =&gt; '0'); -- Timer to regulate baud rate&#13;
&#13;
    signal trigger_0 : std_logic := '0';  -- Synchronizer on trigger input signal&#13;
    signal trigger : std_logic := '0';    -- Synchronizer on trigger input signal&#13;
&#13;
    -- Localparam CLKS_PER_BIT is not needed in VHDL since it's used as a constant value in the code directly&#13;
&#13;
begin&#13;
&#13;
    process (clk_50M) begin&#13;
        if rising_edge(clk_50M) then&#13;
            case tx_state is&#13;
                -- Wait for trigger condition indicating it's time to transmit a byte.&#13;
                when STATE_IDLE =&gt;&#13;
                    busy &lt;= '0';                 -- Indicate that transmitter is idle.&#13;
                    serial_out &lt;= '1';           -- Idle output HIGH, per standard UART behavior.&#13;
                    if trigger = '1' then        -- Check if received trigger to TX a byte&#13;
                        data_aug &lt;= '1' &amp; data_raw &amp; '0';   -- Create augmented byte with start and stop bits&#13;
                        busy &lt;= '1';                        -- Indicate that transmitter is busy.&#13;
                        bit_delay &lt;= (others =&gt; '0');       -- Clear timer used to track duration of each bit&#13;
                        tx_index &lt;= (others =&gt; '0');        -- Point to first bit of data_aug to TX, namely the start bit&#13;
                        tx_state &lt;= STATE_TRANSMITTING;     -- Move on to next state&#13;
                    end if;&#13;
                    &#13;
                -- Transmit all 10 bits with proper the proper duration per bit based on the selected baud rate.&#13;
                when STATE_TRANSMITTING =&gt;&#13;
                    serial_out &lt;= data_aug(to_integer(tx_index));  -- Set output based on current bit to transmit&#13;
                    bit_delay &lt;= bit_delay + 1;                     -- Keep track of duration to hold this bit&#13;
                    if bit_delay &gt; to_unsigned(CLKS_PER_BIT, 32) then  -- Check if bit duration has expired&#13;
                        if tx_index = "1001" then                  -- Check if just transmitted the final bit, i.e. the STOP bit&#13;
                            tx_state &lt;= STATE_CLEANUP;            -- Move on to next state&#13;
                        else&#13;
                            tx_index &lt;= tx_index + 1;             -- Still more bits to send so, point to next bit&#13;
                            bit_delay &lt;= (others =&gt; '0');         -- Clear counter used to regulate baud rate&#13;
                        end if;&#13;
                    end if;&#13;
                    &#13;
                -- Pause for a few bit durations after full byte transmitted.&#13;
                when STATE_CLEANUP =&gt;&#13;
                    bit_delay &lt;= bit_delay + 1;                    -- Keep track of how long been in cleanup state&#13;
                    if bit_delay &gt; to_unsigned(5 * CLKS_PER_BIT, 32) then  -- If paused HIGH long enough, then return to idle state&#13;
                        tx_state &lt;= STATE_IDLE;&#13;
                    end if;&#13;
                    &#13;
                -- Should never get here, but if do, return to IDLE&#13;
                when others =&gt;&#13;
                    tx_state &lt;= STATE_IDLE;&#13;
            end case;&#13;
        end if;&#13;
    end process;&#13;
&#13;
    -- Synchronizer for trigger input&#13;
    process (clk_50M) begin&#13;
        if rising_edge(clk_50M) then&#13;
            trigger_0 &lt;= trigger_raw;&#13;
            trigger &lt;= trigger_0;&#13;
        end if;&#13;
    end process;&#13;
&#13;
end Behavioral;&#13;
</a>
    </comp>
    <wire from="(160,230)" to="(250,230)"/>
    <wire from="(170,180)" to="(230,180)"/>
    <wire from="(210,140)" to="(280,140)"/>
    <wire from="(230,150)" to="(230,180)"/>
    <wire from="(230,150)" to="(280,150)"/>
    <wire from="(250,160)" to="(250,230)"/>
    <wire from="(250,160)" to="(280,160)"/>
    <wire from="(420,140)" to="(480,140)"/>
    <wire from="(420,150)" to="(470,150)"/>
    <wire from="(470,150)" to="(470,190)"/>
    <wire from="(470,190)" to="(490,190)"/>
  </circuit>
</project>
